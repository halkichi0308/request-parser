package burp.com.burp.ui;

import burp.com.burp.assets.MemoTemplate;
import burp.com.burp.util.RequestResponseUtils;

import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout.ParallelGroup;

public class ExtentionTab extends JPanel {

    static final String EXTENTION_NAME = "<html><h2 style='margin:0;padding:0;color:#FF4500'>Request Parser</h2></html>";
    static final String REFRESH_BUTTON_NAME = "Reload";
    static final String UTF8_RADIO_NAME = "UTF-8";
    static final String SJIF_RADIO_NAME = "Shift-JIS";
    static final String EUC_RADIO_NAME = "EUC-JP";
    static final String RAW_RADIO_NAME = "Raw";
    
    static final String INFO_MSG = "<html><div><br><br><br><h2>Request Parser</h2>" + 
    "<p>Request Parser is useful Burp Extender. The Extender is able to use with fewer resources, Because It do with Burp API(Burp Interface) and made from Java.</p><p>The Extender makes you soft.</p>" +
    "<h2>Usage:</h2>" + 
    "<p>Enter the Format Text that you want to replace from request in TextArea on left Panel.</p> "+
    "<p>and then Click on any request and select [Request Parser] from Context Menu.</p><p>Burp paste the parsed request to your clipboard.</p>"+
    "<table border=1><tr><td><input type='text'value='§§raw_req§§'></td><td>Raw Request</td></tr><tr><td><input type='text'value='§§pentest_target§§'></td><td>      Target url (query parametors excluded)    </td></tr><tr><td>      <input type='text'value='§§referred_from§§'>    </td><td>      Referer (query parametors excluded)    </td></tr><tr><td>      <input type='text'value='§§method§§'>    </td><td>      HTTP Request method    </td></tr><tr><td>        <input type='text'value='§§cookies§§'>    </td><td>      String: cookie_name cookie_value    </td></tr><tr><td>      <input type='text'value='§§get_params§§'>    </td><td>      String: [url]name [url]value    </td></tr><tr><td>      <input type='text'value='§§body_params§§'>    </td><td>      String: [body]name [body]value    </td></tr><tr><td>      <input type='text'value='§§params_count§§'>    </td><td>      Count all parametors exclude cookie    </td></tr></table></br>" +
    "</div></html>";
    

    private RequestResponseUtils requestResponseUtils;

    public ExtentionTab(RequestResponseUtils utils) {
      requestResponseUtils = utils;
      initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void render(){
        this.initComponents();
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        clearButton = new JButton();
        headerPanel = new JLabel();
        jScrollPane1 = new JScrollPane();
        requestTextArea = new JTextArea();
        infoLabel = new JLabel();
        jLayeredPane1 = new JLayeredPane();
        buttonGroup1 = new ButtonGroup();
        radioBtn_SJIS = new JRadioButton();
        radioBtn_EUC = new JRadioButton();
        radioBtn_UTF8 = new JRadioButton();
        radioBtn_RAW = new JRadioButton();
        buttonGroup1.add(radioBtn_UTF8);
        buttonGroup1.add(radioBtn_SJIS);
        buttonGroup1.add(radioBtn_EUC);
        buttonGroup1.add(radioBtn_RAW);


        jSeparator1 = new JSeparator();

        clearButton.setText(REFRESH_BUTTON_NAME);
        clearButton.addActionListener(e -> {
            infoLabel.setText(INFO_MSG);
            requestTextArea.setText(MemoTemplate.getFormatTemplate());
            requestTextArea.setCaretPosition(0);// set Scroll TOP.
        });

        headerPanel.setText(EXTENTION_NAME);

        requestTextArea.setColumns(20);
        requestTextArea.setRows(5);
        requestTextArea.setText(MemoTemplate.getFormatTemplate());
        requestTextArea.setCaretPosition(0);// set Scroll TOP.

        jScrollPane1.setViewportView(requestTextArea);

        infoLabel.setText(INFO_MSG);

        radioBtn_UTF8.setText(UTF8_RADIO_NAME);
        radioBtn_SJIS.setText(SJIF_RADIO_NAME);
        radioBtn_EUC.setText(EUC_RADIO_NAME);
        radioBtn_RAW.setText(RAW_RADIO_NAME);
        radioBtn_UTF8.setSelected(true);
        

        /**
         * Right Panel
         */
        GroupLayout jLayeredRightLayout = new GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredRightLayout);
        jLayeredRightLayout.setHorizontalGroup(
            jLayeredRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(radioBtn_SJIS)
                    .addComponent(radioBtn_EUC)
                    .addComponent(radioBtn_UTF8)
                    .addComponent(radioBtn_RAW)
            )
            .addComponent(jSeparator1)
            //.addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addComponent(infoLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        
        /**
         * Right Panel setVerticalGroup
         */
        jLayeredRightLayout.setVerticalGroup(
            jLayeredRightLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
            .addGroup(jLayeredRightLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(radioBtn_UTF8)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioBtn_SJIS)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioBtn_EUC)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioBtn_RAW)
                //.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1)
                .addGap(18, 18, 18)
            )
            .addGroup(jLayeredRightLayout.createParallelGroup()
                .addComponent(infoLabel, GroupLayout.PREFERRED_SIZE, 700, GroupLayout.PREFERRED_SIZE)//700 = witdh
            )
        );
        
        /**
         * Left Panel setHorizontalGroup
         */
        GroupLayout layout = new GroupLayout(this);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);
        this.setLayout(layout);
        layout.setHorizontalGroup(

            layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(headerPanel, GroupLayout.PREFERRED_SIZE, 300, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 700, GroupLayout.PREFERRED_SIZE)
                    )
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(clearButton)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, GroupLayout.Alignment.TRAILING)
                )
            )
        );
        
        /**
         * Left Panel setVerticalGroup
         */
        layout.setVerticalGroup(
            layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(headerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton)
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 661, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                //.addGap(18, 18, 18)
                                .addComponent(jLayeredPane1, GroupLayout.Alignment.TRAILING)
                            )
                        )
                    
                    )
                )
        );
    }// </editor-fold>


	// Variables declaration - do not modify                     
    private ButtonGroup buttonGroup1;
    private JButton clearButton;
    private JLabel headerPanel;
    private JLabel infoLabel;
    private JLayeredPane jLayeredPane1;
    private JRadioButton radioBtn_UTF8;
    private JRadioButton radioBtn_SJIS;
    private JRadioButton radioBtn_EUC;
    private JRadioButton radioBtn_RAW;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JTextArea requestTextArea;
    // End of variables declaration                   


    /**
     * Get text that is your input textarea.
     */
    public String getFormatMemoTextArea() {
        return requestTextArea.getText();
    }

    /**
     * which RadioButton checked.
     */
    public byte decodeChecked(){
        return (byte) (radioBtn_UTF8.isSelected() ? 1
                     : radioBtn_SJIS.isSelected() ? 2 
                     : radioBtn_EUC.isSelected()  ? 3 : 0);
    }
}